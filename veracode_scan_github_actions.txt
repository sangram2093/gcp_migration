jobs:
  veracode-pipeline-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build artifact
        run: mvn package -DskipTests

      - name: Download Veracode Pipeline Scan
        run: |
          curl -sSLO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
          unzip -o pipeline-scan-LATEST.zip

      - name: Run Veracode Pipeline Scan
        run: |
          java -jar pipeline-scan.jar \
            --veracode_api_id ${{ secrets.VERACODE_API_ID }} \
            --veracode_api_key ${{ secrets.VERACODE_API_KEY }} \
            --file target/myapp.jar \
            --jo true \
            --json_output results.json

      - name: Check Veracode results
        run: |
          echo "Parsing results.json..."
          critical_count=$(jq '[.findings[] | select(.issue_type.severity == "Very High" or .issue_type.severity == "High")] | length' results.json)
          echo "High/Critical issues found: $critical_count"
          if [ "$critical_count" -gt 0 ]; then
            echo "❌ Build failed due to High/Critical issues"
            exit 1
          else
            echo "✅ No High/Critical issues found"
          fi


Hi Team,

We have been using Veracode’s Upload & Scan (Sandbox) approach in our builds, but it often causes failures when multiple scans are queued or overlap. To address this, I recommend we transition to Veracode Pipeline Scan for our CI/CD enforcement.

Key benefits of Pipeline Scan:

⚡ Fast & Local Execution – Runs directly in the build pipeline without waiting for sandbox availability.

🛡️ Deterministic Results – Each build executes its own scan, avoiding failures due to shared sandboxes.

🚫 Policy Enforcement at Build Time – We can automatically fail builds if High/Critical issues are detected.

📊 Flexible Output – JSON/SARIF reports can be integrated into GitHub Actions, dashboards, or code scanning alerts.

🔄 Complementary to Policy Scans – Pipeline Scan gives fast developer feedback, while full policy scans can continue on release branches for compliance reporting.

This change will give us faster feedback, more stable builds, and better developer experience without losing the compliance visibility we need.

Let’s plan to adopt Pipeline Scan for build-time checks, while reserving Upload & Scan for official policy validations.

Best regards,
[Your Name]
